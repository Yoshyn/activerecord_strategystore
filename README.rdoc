= ActiverecordStrategystore
# WARNING : THIS IS ONLY A PROF OF CONCEPT.

# TODO : Freeze all string if possible

# ActiveRecord::StrategyStore

[ActiveRecord::StrategyStore](http://api.rubyonrails.org/classes/ActiveRecord/Store.html) ActiveRecord::Store with various casted fields in order to perform a strategy.


## Installation

Add this line to your application's Gemfile:

    gem 'activerecord-strategystore'

And then execute:

    $ bundle

Or install it yourself as:

    $ gem install activerecord-strategystore

## Usage

It works like [ActiveRecord::Store documentation](http://api.rubyonrails.org/classes/ActiveRecord/Store.html) and then you declare your attributes into your strategy.

```ruby
# == Schema Information
# Table name: software
#  id          :integer not null, primary key
#  name        :string
#  settings    :text
  class Sofware
    acts_as_strategy_store(:settings)
  end

class FirstSoftwareStrategy < StrategyStores::Strategy
  strategy_columns do |s|
    s.string :code, null: false, default: 'sample'
    s.integer :num, null: false, default: 0
  end

  def self.perform(*args)
    return "#{self.name} #{code} #{args}"
  end
end

class SecondSoftwareStrategy < StrategyStores::Strategy
  strategy_columns do |s|
    s.string :code, null: false, default: 'sample'
    s.integer :num, null: false, default: 0
  end

  def self.perform(*args)
    return "#{self.name} #{code} #{args}"
  end
end

Sofware.all.each do |soft|
  soft.perform
end
```

## Run several different strategy :

```ruby
StrategyStores.configure do |config|
  config.register_strategy(:software)
end

class Sofware
  acts_as_strategy_store(:settings, strategy_id: 'software')
end

class FirstSoftwareStrategy < StrategyStores::Strategy
  strategy_columns_for(:software) do |s|
    /*...*/
  end
end

class SecondSoftwareStrategy < StrategyStores::Strategy
  strategy_columns_for(:software) do |s|
    /*...*/
  end
end
``
